package com.example.demo.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import com.example.demo.utils.Mypriciple;
@Configuration
@EnableWebSecurity
public class Securityconfig extends WebSecurityConfigurerAdapter {

    @Autowired
    UserDetailsService userDetailService;
    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
 
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        
        http.cors().and().csrf().disable();
         
        http.authorizeRequests()
                .antMatchers("/student","/h2-console").permitAll()
                .and()
                .formLogin();
                
                
        
        http.headers().frameOptions().disable();
    }
    
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    	System.out.println("SecuirtyConfig");
        auth.userDetailsService(userDetailService).passwordEncoder(passwordEncoder());
    }
//    private AuthenticationFilter getAuthenticationFilter() throws Exception {
//        AuthenticationFilter Filter=new AuthenticationFilter(authenticationManager(), usersService);
//        return Filter;
//    }
//	@Autowired
//	UserAuthservice userAuth;
//	@Override
//	protected void  configure(HttpSecurity http) throws Exception {
//		
//		http
//        .csrf().disable()
//        .authorizeRequests()
//        .antMatchers("/student","/h2-console/").permitAll()
//        .anyRequest().authenticated()
//        .and()
//        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	}
//    @Bean
//    public UserDetailsService userDetailsService( String username,String password) {
// 
//        //User Role
//        UserDetails theUser = User.withUsername(username)
//                        .passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()::encode)
//                        .password(password).build();
//  
//  
//        InMemoryUserDetailsManager userDetailsManager = new InMemoryUserDetailsManager();
//              
//        userDetailsManager.createUser(theUser);
//        return userDetailsManager;
//  }
//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//        auth.inMemoryAuthentication()
//                .withUser("user")
//                .password("{noop}Aniket")
//                .roles("USER")
//                .and()
//                .withUser("John")
//                .password("{noop}12345678")
//                .roles("USER");
//    }
//    @Autowired
//    private DataSource dataSource;
//    @Bean
//    public PasswordEncoder passwordEncoder() {
//        return new BCryptPasswordEncoder();
//    }
//
//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//    auth
//    .userDetailsService(userAuth);           
//    }
//    private AuthenticationFilter getAuthenticationFilter() throws Exception {
//        final AuthenticationFilter filter = new AuthenticationFilter(authenticationManager(),(AuthenticationConverter) userAuth);
//        return filter;
//    }

}
