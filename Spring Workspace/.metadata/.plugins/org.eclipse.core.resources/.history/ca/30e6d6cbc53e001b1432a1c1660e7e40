package com.example.demo.config;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.FilterChain;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import com.example.demo.repository.Studentrepository;
import com.example.demo.utils.LoginRequestModel;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class BasicAuthFilter extends BasicAuthenticationFilter {
	@Autowired
	Studentrepository studentrepository;

	public BasicAuthFilter(AuthenticationManager authenticationManager) {
		super(authenticationManager);
		// TODO Auto-generated constructor stub
	}
	@Override
	protected void doFilterInternal(HttpServletRequest Req,HttpServletResponse 
	Res,FilterChain chain){
		 
		try{LoginRequestModel creds = new ObjectMapper()
                  .readValue(Req.getInputStream(), LoginRequestModel.class);
		if(SecurityContextHolder .getContext().getAuthentication()==null){
			studentrepository.findEmail(creds.getEmail(), creds.getPassword());
			 UsernamePasswordAuthenticationToken usertoken=new UsernamePasswordAuthenticationToken(
	                            creds.getEmail(),
	                            creds.getPassword(),
	                            new ArrayList<>());
			 usertoken.setDetails(new WebAuthenticationDetailsSource().buildDetails(Req));
			 SecurityContextHolder.getContext().setAuthentication(usertoken);
			
		}
		}
		catch (IOException e) {
            throw new RuntimeException(e);
		
	}
		

  }
}
